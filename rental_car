from argparse import ArgumentParser
import random 
import sys 
import re

class Customer: 
    """Acts as an instance of a customer. It takes the customer's information
    such as  phone number, name, and age. Also allows for them to input their 
    order including the car make, type, and days they will rent the car for.
    
	Attributes:
		name(str): name of customer
		phone_number(str): phone number of customer
        id (int): the customer's id that links them to their order 

	"""
    def __init__(self, name, phone_number): 
        """Initialize the object's attributes. Sets the phone number equal to 
        phone number attribute if it matches the format of the regular 
        expression. The name attribute is passed in as an argument and set equal
        to the name attribute.
        
        Args:
            name (str): customer's name 
            phone_number(str): customer's phone number 
            
        Side effects:
            -sets name,phone number, and id attribute and changes the self object
            -prints to standard output 
	    """
        self.name = name
        self.id = random.randint(1,50) 
        expr = r"\d{3}\D?\d{3}\D?\d{4}" 
        self.phone_number = phone_number if re.search(expr, phone_number) \
            else print("Not a valid phone number format (###-###-####)")
            
    def age(self, required = 21): 
        """Determines if a user is the required age to rent a vehicle. Only 
        users 21 and older will be allowed to otherwise a error will be raised
        saying they are not old enough to rent a car.
        
	    Args:
	        age(int): The age the user inputs
	        required(int): the optional age parameter, with a default required 
                           age of 21
	
	    Side effects:
	        print(str): A statement is printed based on the age that user inputs
         
        Raises:
            ValueError: if the value of age is lower than the required age of 
                        21 to rent a car  
	    """
        age = int(input("====================================================="
                        + "======\n"
                        + "What is your age? \n"))
        if age >= required:
            print("===========================================================")
            print("You are old enough to rent a car, please continue.")   
            print("===========================================================")
        else:
            print("===========================================================")
            raise ValueError("Must be at least 21 to rent a car")

      
class RentalOrder: 
    """RentalOrder class organizes all of the information from the Customer 
    class, by taking in an instance of the customer class as a customer of the
    rental car. The inventory is printed out to display the rental car 
    information. Customer inputs information about their rental car order and 
    price totals and a final receipt will be generated and printed for the 
    customer. 
    
    Attributes: 
        customer(instance of the Customer class): instance of the Customer class.
        cars(dictionary): dictionary that will have the make (str) of the car
                          as the key, and the value will be equal to a list of 
                          information about the car such as number in stock(int), 
                          the car type (str)(sedan, etc), and the price (float) 
                          in that order. This will be used to access information 
                          about the cars in other methods.
        customerID(int): the customer's ID that links them to their rental car
        order. 
        final(float): the total calculated renting price for the customer.
        customer_choice_type(str): the type of car that the customer wants
                                   to rent. (ex: sedan)
        customer_choice_make(str): the make of car that the customer wants
                                   to rent. (ex: Honda)
        duration(int): the number of days the customer wants to rent. 
        extra(str): the add-ons the customer may want to include, such as 
                    insurance, roadside assistance, both, or none. 
        
    """
    
    def __init__(self, filepath, customer): 
        """ This class initalizes the customer (which is an instance of the
        Customer class) and cars (which is a dictionary about the car 
        information) as an attribute. It also reads in the file in which the 
        values are separated by commmas and uses sequence unpacking to create 
        the variables or the different information about the car 
        (such as the number in stock, the type of car, and the price) and it 
        prints each line of code in the file including the make of the car, 
        the number in stock, the type of car and the price of the car. 
        
        
        Args: 
            filepath (str): path to a text file with UTF-8 encoding, that 
                            contains information about the cars such as 
                            number in stock (int), make (str), car type(str), 
                            and price (float) (in that order) which will be
                            split through sequence unpacking. Each of the values
                            in file are seperated by commas. Each line of the 
                            file will contain information about a different make
                            and type of car.
        
            customer (instance of the Customer class): instance of the Customer 
                                                       class
          
                                                        
        Side effects:
            -print (str): f-string of the cars in stock
            -sets customer, cars, and customer id attribute 
            
        """
                                               
        self.customer = customer 
        self.customerId = customer.id
        self.cars = {} 
        with open(filepath, "r", encoding = "utf-8") as f:
            for line in f:
                number_in_stock, make, car_type, price = line.split(",") 
                self.cars[make] = [number_in_stock, car_type, float(price)]
                # eg: {toyota: [4, sedan, 5.00]}
                print (f"  Stock: {number_in_stock}"
                       f"  Make: {make}"
                       f"  Type: {car_type}"
                       f"  Price: {price}")
    def order(self): 
        """Asks the customer what type of car they want (such as Sedan, SUV, 
        Truck, etc.), the make of the car (such as Toyota, Honda, etc.), 
        the number of days they want to rent, and any add ons they want to 
        include (such as road-side assitance, or insurance) and each of those 
        are recorded as an attribute.
            
        Side effects: 
            Sets the customer_choice_type, customer_choice_make, duration, and 
            extra attributes. 

        """
        self.customer_choice_type = input("Please choose from the following car"
                                    +" type options: Sedan, SUV, Van, Truck \n")
        
        print ("===========================================================")
        
        self.customer_choice_make = input("Please enter the make of the car you"
                                        +" want \n")
        print ("===========================================================")
        
        self.duration = int(input("Please enter how many days you will rent " 
                            + "the car for. \n"))
        
        print ("===========================================================")
        
        self.extra = input("To include add-ons, please enter: " +
                      "Insurance, Roadside Assistance, Both, or None. \n")
                
    def stock(self):
        """ Using a set of makes in stock, it checks to see if the user's 
        choice of make is available.
            
        Side effects:
            Prints if user's input of the make is available.
        Raises:
            ValueError: if the requested make is unavailable
        """
        make_available = {"Toyota","Honda","Ford","Chevrolet","Nissan", "Jeep"}
        user_choice = set()
        user_choice.add(self.customer_choice_make)
        if make_available & user_choice:
            print ("We have your preferred make in stock.")
        else:
            raise ValueError ("Your requested make is not in stock. Try again.")
        
    def price_of_cars(self):
        """Sorts the cars using a lambda function based on the prices from least
        to greatest.
        
        Side effect: 
            - sorted() method displays a sorted list of cars based on the prices 
            for the customers to see 
            - prints sorted list
        """ 
        print("List of makes from least expensive to most expensive")
        pricing = sorted(self.cars, key = lambda c: self.cars[c][2])
        print(pricing)
        
    def additional_fees(self):
        """Shows the add on options available to the customer and what 
        displays which option they chose and the price of the add on based on 
        their input.
            
        Side effects:
            prints an f-string if the user's add on choice is available, 
            otherwise prints that the add on is not available 
            
        """
        fees = {"Insurance": 30,"Roadside Assistance":20, "Both": 50, "None":0}
        for add_on in fees:
            if add_on == self.extra: 
                print (f"Your {add_on} add on price is: {fees[add_on]} dollars")
        
        if self.extra not in fees:
            print ("Your choice of add-on is not available.")
            
    def total_cost(self):
        """Calculates total price by multipying the price per day times the 
        number of days it is being rented.
        
        Side effects: 
            sets the final attribute to self 
            
        """
        cost = 0
        if self.customer_choice_make in self.cars:
            cost = self.cars[self.customer_choice_make][2]
        self.final = cost * self.duration
        
    def __add__(self,other):
        """ Add up the different totals between two instances of the RentalOrder
        class final cost to determine profits.
        
        Args:
            other (instance of RentalOrder): another instance of the RentalOrder
                                             class
        
        Return:
            returns the total sum between the final cost of two instances of the
            RentalOrder class
            
        """
        return self.final + other.final
        
    def receipt(self, store = "Team Blue's Rental"):
        """Creates receipt of the entire customer order by calling the 
        attributes and printing an f-string.
        
        Args:
            store(str): name of the rental store,default value is "Team Blue's 
            Rental"
            
        Side effects:
            prints the details of the customer's order as an f-string. 
        """
        self.total_cost()
        print (f"Receipt: \n {self.customer.name} rented a"
               f" {self.customer_choice_make}" 
               f" {self.customer_choice_type}. Your car is being rented for"
               f" {self.final} not including add-on fees. Thank you for renting"
               f" from {store}.")
        
def main(filepath, name, phone_number): 
    """Main driver for the program. Calls the methods as needed. We will make 
    an instance of the Customer class and pass that into the Rental Car class 
    as an attribute. We will also call the receipt method. 
    
    Args:
        filepath (str): path to a text file with UTF-8 encoding, that 
                        contains information about the cars such as 
                        number in stock (int), make (str), car type(str), 
                        and price (float) (in that order) which will be
                        split through sequence unpacking. The values are 
                        separated by commas. Each line of the file will 
                        contain information about a different make and type of 
                        car.
    Side effects: 
        prints an f-string greeting the customer, beginning the process of the 
        order to recieve their inputs. 
        
    """ 
    client = Customer(name, phone_number)
    client.age()
    print(f"Hello {client.name}! Please begin your rental order!")
    print ("===========================================================")
    rental = RentalOrder(filepath, client)
    rental.price_of_cars() 
    print ("===========================================================")
    rental.order()
    print ("===========================================================")
    rental.stock() 
    print ("===========================================================")
    rental.additional_fees() 
    print ("===========================================================")
    rental.receipt()    
    print ("===========================================================")
    
def parse_args(arglist):
    """Parses command-line arguments. The command line arguments it is expecting
    is a filepath, the name of the customer, and the phone number of the 
    customer"
    
    Args:
        arglist(list of str): arguments from the command line,
    Returns:
        namespace: the parsed arguments, as a namespace."""
    parser = ArgumentParser()
    parser.add_argument("filepath", help= "file with information about cars")
    parser.add_argument("name", help = "customer's name")
    parser.add_argument("phone_number", help = "the customer's phone number")
    
    return parser.parse_args(arglist)

if __name__ == "__main__":
    """Not defined as a method or function, but allows the program to run as a
    script."""
    args = parse_args(sys.argv[1:])
    main = main(args.filepath, args.name, args.phone_number) 
    
