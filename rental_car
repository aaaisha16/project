from argparse import ArgumentParser

class Customer: 
    """Acts as an instance of a customer. It takes the customer's information
    such as  phone number, name, and age. Also allows for them to input their 
    order including the car make, type, and days they will rent the car for.
    
	Attributes:
		name(str): name of customer
		phone_number(str): phone number of customer
        customer_choice_type (str): the type of car that the customer wants
                                    to rent
        customer_choice_make (str): the make of car that the customer wants
                                    to rent
        duration (int): the number of days the customer wants to rent 
        extra (str): the add-ons the customer may want to include, such as 
                    insurance or roadside assistance 

	"""
    def __init__(self, name, phone_number): 
        """Initialize the object's attributes. Sets the phone number equal to 
        phone number attribute if it matches the format of the regular 
        expression.
        
        Args:
            name (str): name of customer
            phone_number(str): phone number of customer
            
        Side effects:
            -sets name and phone number attribute and changes the self attribute
            -prints to standard output 
	    """
        self.name = name
        self.id = random.randint(1,50) 
        expr = r"\d{3}\D?\d{3}\D?\d{4}" 
        self.phone_number = phone_number if re.search(expr, phone_number) \
            else print("Not a valid phone number format (###-###-####)")
            
    def age(self, required = 21): 
        """Determines if a user is the required age to rent a vehicle. Only 
        users 21 and older will be allowed to otherwise a prompt will display
        saying they are not old enough to rent a car.
        
	    Args:
	        age(int): The age the user inputs
	        required(int): the optional age parameter, with a default required 
                           age of 21
	
	    Side effects:
	        print(str): A statement is printed based on the age that user inputs 
	    """
        age = int(input("What is your age? \n"))
        if age >= required:
            print ("You are old enough to rent a car, please continue.")   
        else:
            raise ValueError("Must be at least 21 to rent a car")
      

    def order(self): 
        """Asks the customer what type of car they want (such as sedan, SUV,
        or truck), the make of the car (such as Toyota or Honda), the number of 
        days they want to rent, and any add ons they want to include (such as 
        road-side assitance, or insurance) and each of those are recorded as an
        attribute.
            
        Side effects: 
            Sets the customer_choice_type, customer_choice_make, duration, and 
            extra attributes. 

        """
class RentalOrder: 
    """RentalOrder class organizes all of the information from the Customer class,
    by taking in an instance of the customer class as a customer of the rental 
    car. Then uses the customer's order information that they inputted to 
    calculate price totals and generate a final receipt that will print out for
    the customer. 
    
    Attributes: 
        customer(instance of the Customer class): instance of the Customer class
        cars(dictionary): dictionary that will have the make (str) of the car
                          as the key, and the value will be equal to a list of 
                          information about the car such as number in stock(int), 
                          the car type (str)(sedan, etc), and the price (float) 
                          in that order. This will be used to access information 
                          about the cars in other methods.
        final (float): the total calculated renting price for the customer  
        
    """
    
    def __init__(self, filepath, customer): 
        """ This class initalizes the customer (which is an instance of the
        Customer class) and cars (which is a dictionary about the car information)
        as attribute. It also reads in the file in which the values are separated
        by commmas and uses sequence unpacking to create the variables or the 
        different information about the car (such as the number in stock, 
        the type of car, and the price) and it prints each line of code in the 
        file including the make of the car, the number in stock, the type of car 
        and the price of the car. 
        
        
        Args: 
            filepath (str): path to a text file with UTF-8 encoding, that 
                            contains information about the cars such as 
                            number in stock (int), make (str), car type(str), 
                            and price (float) (in that order) which will be
                            split through sequence unpacking.
                            Each line of the file will contain information about a 
                            different make and type of car.
        
            customer (instance of the Customer class): instance of the Customer 
                                                       class
          
                                                        
        Side effects:
            -print (str): f-string of the cars in stock
            - sets customer and cars attribute 
            
        """
                                               
        self.customer = customer 
        self.customerId = customer.id
        self.cars = {} 
        with open(filepath, "r", encoding = "utf-8") as f:
            for line in f:
                number_in_stock, make, car_type, price = line.split(",") 
                self.cars[make] = [number_in_stock, car_type, float(price)]
                # eg: {toyota: [4, sedan, 5.00]}
                print (f"  Stock: {number_in_stock}"
                       f"  Make: {make}"
                       f"  Type: {car_type}"
                       f"  Price: {price}")
                
    def stock(self):
        """ Returns a new set of the updated stock after subtracting the 
        customer's order (which we will use a set function on) from the current 
        stock.
            
        Returns:
            it returns the new set of the new available stock in an f-string
            
        """
        make_available = {"Toyota","Honda","Ford","Chevrolet","Nissan", "Jeep"}
        user_choice = set()
        user_choice.add(self.customer_choice_make)
        if make_available & user_choice:
            print ("We have your preferred make in stock.")
        else:
            raise ValueError ("Your requested make is not in stock. Try again.")
        
    def price_of_cars(self):
        """Sorts the cars using a lambda function based on the prices.
        
        Side effect: 
            sorted() method returns a sorted list of cars based on the prices 
            for the customers to see 
        """ 
    def additional_fees(self):
        """Adds on the additional fees to the price depending on what is
        available to the customer and what option they chose based on their
        input.
            
        Returns:
            f-str: tells the user what the price is of the add on they used. 
        """
        fees = {"insurance": 30,"roadside assistance":20, "both": 50, "None":0}
        for add_on in fees:
            if add_on == self.extra: 
                print (f"Your {add_on} add on price is: {fees[add_on]} dollars")
        
        if self.extra not in fees:
            print ("Your choice of add-on is not available.")
        
    def __add__(self,other):
        """
        """
        return self.final + other.final
        
    def receipt(self, store = "Team Blue's Rental"):
        """Creates receipt of the entire customer order by calling the attributes
        and printing an f-string.
        
        Args:
            store (str): name of the rental store,default value is "Ally Rental"
            
        Side effects:
            prints the details of the customer's order in an f-string 
        """
        self.total_cost()
        print (f"Receipt: \n {self.customer.name} rented a"
               f" {self.customer_choice_make}" 
               f" {self.customer_choice_type}. Your car is being rented for"
               f" {self.final} not including any add-on fees. Thank you for renting"
               f" from {store}.")
        
def main(filepath, name, phone_number): 
    """Main driver for the program. Calls the methods as needed. We will make 
    an instance of the Customer class and pass that into the Rental Car class 
    as an attribute. We will also call the receipt method. 
    
    Args:
        filepath (str): path to a text file with UTF-8 encoding, that 
                        contains information about the cars such as 
                        number in stock (int), make (str), car type(str), 
                        and price (float) (in that order) which will be
                        split through sequence unpacking. The values are 
                        separated by commas. Each line of the file will 
                        contain information about a different make and type of 
                        car.
        
    """ 
    client = Customer(name, phone_number)
    client.age()
    print(f"Hello {client.name}! Please begin your rental order!")
    rental = RentalOrder(filepath, client)
    rental.price_of_cars() 
    rental.order()
    rental.stock() 
    rental.additional_fees() 
    rental.receipt() 

def parse_args(arglist):
    """Parses command-line arguments. The command line arguments it is expecting
    is a filepath, the name of the customer, and the phone number of the 
    customer"
    
    Args:
        arglist(list of str): arguments from the command line,
    Returns:
        namespace: the parsed arguments, as a namespace."""

if __name__ == "__main__":
    """Not defined as a method or function, but allows the program to run as a
    script."""
    args = parse_args(sys.argv[1:])
    main = main(args.filepath) 
    
